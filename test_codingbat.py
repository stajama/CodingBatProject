#!/usr/bin/env python3

import unittest
from codingbat import *

class UnitTesting4CodingBat(unittest.TestCase):
    """A series of tests for the the CodingBat solution functions in
    CodingBat.py. Solutions are copied directly from www.codingbat.py with
    exception for the elements that appear blantantly incorrect."""

    #From Warmup-1
    def test_sleep_in(self):
        self.assertEqual(sleep_in(False, False), True)    
        self.assertEqual(sleep_in(True, False), False)    
        self.assertEqual(sleep_in(False, True), True)    
        self.assertEqual(sleep_in(True, True), True)

    def test_monkey_trouble(self):
        self.assertEqual(monkey_trouble(True, True), True) 
        self.assertEqual(monkey_trouble(False, False), True)
        self.assertEqual(monkey_trouble(True, False), False)
        self.assertEqual(monkey_trouble(False, True), False)

    def test_sum_double(self):
        self.assertEqual(sum_double(1, 2), 3)
        self.assertEqual(sum_double(3, 2), 5)
        self.assertEqual(sum_double(2, 2), 8)
        self.assertEqual(sum_double(-1, 0), -1)
        self.assertEqual(sum_double(3, 3), 12)
        self.assertEqual(sum_double(0, 0), 0)
        self.assertEqual(sum_double(0, 1), 1)
        self.assertEqual(sum_double(3, 4), 7)

    def test_diff21(self):
        self.assertEqual(diff21(19), 2)
        self.assertEqual(diff21(10), 11)
        self.assertEqual(diff21(21), 0)
        self.assertEqual(diff21(22), 2)
        self.assertEqual(diff21(25), 8)
        self.assertEqual(diff21(30), 18)
        self.assertEqual(diff21(0), 21)
        self.assertEqual(diff21(1), 20)
        self.assertEqual(diff21(2), 19)
        self.assertEqual(diff21(-1), 22)
        self.assertEqual(diff21(-2), 23)  
        self.assertEqual(diff21(50), 58)


    def test_parrot_trouble(self):
        self.assertEqual(monkey_trouble(True, True), True)
        self.assertEqual(monkey_trouble(False, False), True)
        self.assertEqual(monkey_trouble(True, False), False) 
        self.assertEqual(monkey_trouble(False, True), False)

    def test_makes10(self):
        self.assertEqual(makes10(9, 10), True) 
        self.assertEqual(makes10(9, 9), False) 
        self.assertEqual(makes10(1, 9), True)
        self.assertEqual(makes10(10, 1), True) 
        self.assertEqual(makes10(10, 10), True)
        self.assertEqual(makes10(8, 2), True) 
        self.assertEqual(makes10(8, 3), False)
        self.assertEqual(makes10(10, 42), True) 
        self.assertEqual(makes10(12, -2), True)

    def test_near_hundred(self):
        self.assertEqual(near_hundred(93), True)  
        self.assertEqual(near_hundred(90), True)  
        self.assertEqual(near_hundred(89), False)   
        self.assertEqual(near_hundred(110), True) 
        self.assertEqual(near_hundred(111), False) 
        self.assertEqual(near_hundred(121), False)  
        self.assertEqual(near_hundred(-101), False)  
        self.assertEqual(near_hundred(-209), False)  
        self.assertEqual(near_hundred(190), True)  
        self.assertEqual(near_hundred(209), True)  
        self.assertEqual(near_hundred(0), False)
        self.assertEqual(near_hundred(5), False)
        self.assertEqual(near_hundred(-50), False)
        self.assertEqual(near_hundred(191), True)
        self.assertEqual(near_hundred(189), False)
        self.assertEqual(near_hundred(200), True)
        self.assertEqual(near_hundred(210), True)
        self.assertEqual(near_hundred(211), False)
        self.assertEqual(near_hundred(290), False)

    def test_pos_neg(self):
        self.assertEqual(pos_neg(1, -1, False), True) 
        self.assertEqual(pos_neg(-1, 1, False), True) 
        self.assertEqual(pos_neg(-4, -5, True), True) 
        self.assertEqual(pos_neg(-4, -5, False), False) 
        self.assertEqual(pos_neg(-4, 5, False), True) 
        self.assertEqual(pos_neg(-4, 5, True), False) 
        self.assertEqual(pos_neg(1, 1, False), False)   
        self.assertEqual(pos_neg(-1, -1, False), False)
        self.assertEqual(pos_neg(1, -1, True), False)
        self.assertEqual(pos_neg(-1, 1, True), False)
        self.assertEqual(pos_neg(1, 1, True), False)
        self.assertEqual(pos_neg(-1, -1, True), True)
        self.assertEqual(pos_neg(5, -5, False), True)
        self.assertEqual(pos_neg(-6, 6, False), True)
        self.assertEqual(pos_neg(-5, -6, False), False)
        self.assertEqual(pos_neg(-2, -1, False), False)
        self.assertEqual(pos_neg(1, 2, False), False)
        self.assertEqual(pos_neg(-5, 6, True), False) 
        self.assertEqual(pos_neg(-5, -5, True), True)

    def test_not_string(self):
        self.assertEqual(not_string('candy'), 'not candy') 
        self.assertEqual(not_string('x'), 'not x')
        self.assertEqual(not_string('not bad'), 'not bad')  
        self.assertEqual(not_string('bad'), 'not bad')
        self.assertEqual(not_string('not'), 'not')
        self.assertEqual(not_string('is not'), 'not is not')  
        self.assertEqual(not_string('no'), 'not no')

    def test_missing_char(self):
        self.assertEqual(missing_char('kitten', 1), 'ktten') 
        self.assertEqual(missing_char('kitten', 0), 'itten') 
        self.assertEqual(missing_char('kitten', 4), 'kittn') 
        self.assertEqual(missing_char('Hi', 0), 'i')
        self.assertEqual(missing_char('Hi', 1), 'H')
        self.assertEqual(missing_char('code', 0), 'ode')
        self.assertEqual(missing_char('code', 1), 'cde')
        self.assertEqual(missing_char('code', 2), 'coe')
        self.assertEqual(missing_char('code', 3), 'cod')
        self.assertEqual(missing_char('chocolate', 8), 'chocolat')

    def test_front_back(self):
        self.assertEqual(front_back('code'), 'eodc')
        self.assertEqual(front_back('a'), 'a')
        self.assertEqual(front_back('ab'), 'ba')
        self.assertEqual(front_back('abc'), 'cba') 
        self.assertEqual(front_back(''), '')
        self.assertEqual(front_back('Chocolate'), 'ehocolatC')
        self.assertEqual(front_back('aavJ'), 'Java')
        self.assertEqual(front_back('hello'), 'oellh')

    def test_front3(self):
        self.assertEqual(front3('Java'), 'JavJavJav')
        self.assertEqual(front3('Chocolate'), 'ChoChoCho')
        self.assertEqual(front3('abc'), 'abcabcabc')
        self.assertEqual(front3('abcXYZ'), 'abcabcabc')
        self.assertEqual(front3('ab'), 'ababab')
        self.assertEqual(front3('a'), 'aaa')
        self.assertEqual(front3(''), '')

    #From Warmup-2
    def test_string_times(self):
        self.assertEqual(string_times('Hi', 2), 'HiHi') 
        self.assertEqual(string_times('Hi', 3), 'HiHiHi')  
        self.assertEqual(string_times('Hi', 1), 'Hi') 
        self.assertEqual(string_times('Hi', 0), '') 
        self.assertEqual(string_times('Hi', 5), 'HiHiHiHiHi') 
        self.assertEqual(string_times('Oh Boy!', 2), 'Oh Boy!Oh Boy!')  
        self.assertEqual(string_times('x', 4), 'xxxx')
        self.assertEqual(string_times('', 4), '')
        self.assertEqual(string_times('code', 2), 'codecode')
        self.assertEqual(string_times('code', 3), 'codecodecode')

    def test_front_times(self):
        self.assertEqual(front_times('Chocolate', 2), 'ChoCho') 
        self.assertEqual(front_times('Chocolate', 3), 'ChoChoCho') 
        self.assertEqual(front_times('Abc', 3), 'AbcAbcAbc') 
        self.assertEqual(front_times('Ab', 4), 'AbAbAbAb') 
        self.assertEqual(front_times('A', 4), 'AAAA') 
        self.assertEqual(front_times('', 4), '')
        self.assertEqual(front_times('Abc', 0), '')

    def test_string_bits(self):
        self.assertEqual(string_bits('Hello'), 'Hlo') 
        self.assertEqual(string_bits('Hi'), 'H')
        self.assertEqual(string_bits('Heeololeo'), 'Hello') 
        self.assertEqual(string_bits('HiHiHi'), 'HHH') 
        self.assertEqual(string_bits(''), '')
        self.assertEqual(string_bits('Greetings'), 'Getns') 
        self.assertEqual(string_bits('Chocoate'), 'Coot')
        self.assertEqual(string_bits('pi'), 'p')
        self.assertEqual(string_bits('Hello Kitten'), 'HloKte')
        self.assertEqual(string_bits('hxaxpxpxy'), 'happy')

    def test_string_splosion(self):
        self.assertEqual(string_splosion('Code'), 'CCoCodCode')
        self.assertEqual(string_splosion('abc'), 'aababc') 
        self.assertEqual(string_splosion('ab'), 'aab')
        self.assertEqual(string_splosion('x'), 'x')
        self.assertEqual(string_splosion('fade'), 'ffafadfade')
        self.assertEqual(string_splosion('There'), 'TThTheTherThere')
        self.assertEqual(string_splosion('Kitten'), 'KKiKitKittKitteKitten')  
        self.assertEqual(string_splosion('Bye'), 'BByBye')
        self.assertEqual(string_splosion('Good'), 'GGoGooGood')
        self.assertEqual(string_splosion('Bad'), 'BBaBad')

    def test_last2(self):
        self.assertEqual(last2('hixxhi'), 1)
        self.assertEqual(last2('xaxxaxaxx'), 1) 
        self.assertEqual(last2('axxxaaxx'), 2) 
        self.assertEqual(last2('xxaxxaxxaxx'), 3)
        self.assertEqual(last2('xaxaxaxx'), 0)
        self.assertEqual(last2('xxxx'), 2)
        self.assertEqual(last2('13121312'), 1)
        self.assertEqual(last2('11212'), 1)
        self.assertEqual(last2('13121311'), 0)
        self.assertEqual(last2('1717171'), 2)
        self.assertEqual(last2('hi'), 0)
        self.assertEqual(last2('h'), 0)
        self.assertEqual(last2(''), 0)

    def test_array_count9(self):
        self.assertEqual(array_count9([1, 2, 9]), 1) 
        self.assertEqual(array_count9([1, 9, 9]), 2) 
        self.assertEqual(array_count9([1, 9, 9, 3, 9]), 3)
        self.assertEqual(array_count9([1, 2, 3]), 0)
        self.assertEqual(array_count9([]), 0) 
        self.assertEqual(array_count9([4, 2, 4, 3, 1]), 0) 
        self.assertEqual(array_count9([9, 2, 4, 3, 1]), 1)

    def test_array_front9(self):
        self.assertEqual(array_front9([1, 2, 9, 3, 4]), True)
        self.assertEqual(array_front9([1, 2, 3, 4, 9]), False) 
        self.assertEqual(array_front9([1, 2, 3, 4, 5]), False)
        self.assertEqual(array_front9([9, 2, 3]), True)
        self.assertEqual(array_front9([1, 9, 9]), True)
        self.assertEqual(array_front9([1, 2, 3]), False) 
        self.assertEqual(array_front9([1, 9]), True)
        self.assertEqual(array_front9([5, 5]), False) 
        self.assertEqual(array_front9([2]), False)
        self.assertEqual(array_front9([9]), True)
        self.assertEqual(array_front9([]), False)
        self.assertEqual(array_front9([3, 9, 2, 3, 3]), True)

    def test_array123(self):
        self.assertEqual(array123([1, 1, 2, 3, 1]), True)
        self.assertEqual(array123([1, 1, 2, 4, 1]), False) 
        self.assertEqual(array123([1, 1, 2, 1, 2, 3]), True)
        self.assertEqual(array123([1, 1, 2, 1, 2, 1]), False)
        self.assertEqual(array123([1, 2, 3, 1, 2, 3]), True)  
        self.assertEqual(array123([1, 2, 3]), True)
        self.assertEqual(array123([1, 1, 1]), False)
        self.assertEqual(array123([1, 2]), False)
        self.assertEqual(array123([1]), False) 
        self.assertEqual(array123([]), False)

    def test_string_match(self):
        self.assertEqual(string_match('xxcaazz', 'xxbaaz'), 3)
        self.assertEqual(string_match('abc', 'abc'), 2)
        self.assertEqual(string_match('abc', 'axc'), 0)
        self.assertEqual(string_match('hello', 'he'), 1) 
        self.assertEqual(string_match('he', 'hello'), 1)
        self.assertEqual(string_match('h', 'hello'), 0)
        self.assertEqual(string_match('', 'hello'), 0)
        self.assertEqual(string_match('aabbccdd', 'abbbxxd'), 1)  
        self.assertEqual(string_match('aaxxaaxx', 'iaxxai'), 3) 
        self.assertEqual(string_match('iaxxai', 'aaxxaaxx'), 3)

    # From String-1
    def test_hello_name(self):
        self.assertEqual(hello_name('Bob'), 'Hello Bob!') 
        self.assertEqual(hello_name('Alice'), 'Hello Alice!') 
        self.assertEqual(hello_name('X'), 'Hello X!')
        self.assertEqual(hello_name('Dolly'), 'Hello Dolly!') 
        self.assertEqual(hello_name('Alpha'), 'Hello Alpha!' ) 
        self.assertEqual(hello_name('Omega'), 'Hello Omega!') 
        self.assertEqual(hello_name('Goodbye'), 'Hello Goodbye!')  
        self.assertEqual(hello_name('ho ho ho'), 'Hello ho ho ho!') 
        self.assertEqual(hello_name('xyz!'), 'Hello xyz!!')
        self.assertEqual(hello_name('Hello'), 'Hello Hello!')

    def test_make_abba(self):
        self.assertEqual(make_abba('Hi', 'Bye'), 'HiByeByeHi')
        self.assertEqual(make_abba('Yo', 'Alice'), 'YoAliceAliceYo')
        self.assertEqual(make_abba('What', 'Up'), 'WhatUpUpWhat')
        self.assertEqual(make_abba('aaa', 'bbb'), 'aaabbbbbbaaa') 
        self.assertEqual(make_abba('x', 'y'), 'xyyx')
        self.assertEqual(make_abba('x', ''), 'xx')
        self.assertEqual(make_abba('', 'y'), 'yy')
        self.assertEqual(make_abba('Bo', 'Ya'), 'BoYaYaBo')
        self.assertEqual(make_abba('Ya', 'Ya'), 'YaYaYaYa')

    def test_make_tags(self):
        self.assertEqual(make_tags('i', 'Yay'), '<i>Yay</i>')
        self.assertEqual(make_tags('i', 'Hello'), '<i>Hello</i>')
        self.assertEqual(make_tags('cite', 'Yay'), '<cite>Yay</cite>')
        self.assertEqual(make_tags('address', 'here'), '<address>here</address>') 
        self.assertEqual(make_tags('body', 'Heart'), '<body>Heart</body>')
        self.assertEqual(make_tags('i', 'i'), '<i>i</i>')
        self.assertEqual(make_tags('i', ''), '<i></i>')

    def test_make_out_word(self):
        self.assertEqual(make_out_word('<<>>', 'Yay'), '<<Yay>>') 
        self.assertEqual(make_out_word('<<>>', 'WooHoo'), '<<WooHoo>>')
        self.assertEqual(make_out_word('[[]]', 'word'), '[[word]]')
        self.assertEqual(make_out_word('HHoo', 'Hello'), 'HHHellooo')
        self.assertEqual(make_out_word('abyz', 'YAY'), 'abYAYyz')

    def test_extra_end(self):
        self.assertEqual(extra_end('Hello'), 'lololo') 
        self.assertEqual(extra_end('ab'), 'ababab')
        self.assertEqual(extra_end('Hi'), 'HiHiHi')
        self.assertEqual(extra_end('Candy'), 'dydydy') 
        self.assertEqual(extra_end('Code'), 'dedede')

    def test_first_two(self):
        self.assertEqual(first_two('Hello'), 'He')
        self.assertEqual(first_two('abcdefg'), 'ab')
        self.assertEqual(first_two('ab'), 'ab')
        self.assertEqual(first_two('a'), 'a')
        self.assertEqual(first_two(''), '')
        self.assertEqual(first_two('Kitten'), 'Ki')
        self.assertEqual(first_two('hi'), 'hi')
        self.assertEqual(first_two('hiya'), 'hi')

    def test_first_half(self):
        self.assertEqual(first_half('WooHoo'), 'Woo')
        self.assertEqual(first_half('HelloThere'), 'Hello')  
        self.assertEqual(first_half('abcdef'), 'abc')
        self.assertEqual(first_half('ab'), 'a')
        self.assertEqual(first_half(''), '')
        self.assertEqual(first_half('0123456789'), '01234')
        self.assertEqual(first_half('kitten'), 'kit')

    def test_without_end(self):
        self.assertEqual(without_end('Hello'), 'ell') 
        self.assertEqual(without_end('java'), 'av')
        self.assertEqual(without_end('coding'), 'odin') 
        self.assertEqual(without_end('code'), 'od')
        self.assertEqual(without_end('ab'), '')
        self.assertEqual(without_end('Chocolate!'), 'hocolate') 
        self.assertEqual(without_end('kitten'), 'itte')
        self.assertEqual(without_end('woohoo'), 'ooho')

    def test_combo_string(self):
        self.assertEqual(combo_string('Hello', 'hi'), 'hiHellohi')
        self.assertEqual(combo_string('hi', 'Hello'), 'hiHellohi')
        self.assertEqual(combo_string('aaa', 'b'), 'baaab')
        self.assertEqual(combo_string('b', 'aaa'), 'baaab')
        self.assertEqual(combo_string('aaa', ''), 'aaa') 
        self.assertEqual(combo_string('', 'bb'), 'bb')
        self.assertEqual(combo_string('aaa', '1234'), 'aaa1234aaa')
        self.assertEqual(combo_string('aaa', 'bb'), 'bbaaabb')
        self.assertEqual(combo_string('a', 'bb'), 'abba')
        self.assertEqual(combo_string('bb', 'a'), 'abba')
        self.assertEqual(combo_string('xyz', 'ab'), 'abxyzab')

    def test_non_start(self):
        self.assertEqual(non_start('Hello', 'There'), 'ellohere')
        self.assertEqual(non_start('java', 'code'), 'avaode')
        self.assertEqual(non_start('shotl', 'java'), 'hotlava')
        self.assertEqual(non_start('ab', 'xy'), 'by')
        self.assertEqual(non_start('ab', 'x'), 'b')
        self.assertEqual(non_start('x', 'ac'), 'c')
        self.assertEqual(non_start('a', 'x'), '')
        self.assertEqual(non_start('kit', 'kat'), 'itat')
        self.assertEqual(non_start('mart', 'dart'), 'artart')

    def test_left2(self):
        self.assertEqual(left2('Hello'), 'lloHe')
        self.assertEqual(left2('java'), 'vaja')
        self.assertEqual(left2('Hi'), 'Hi')
        self.assertEqual(left2('code'), 'deco') 
        self.assertEqual(left2('cat'), 'tca')
        self.assertEqual(left2('12345'), '34512') 
        self.assertEqual(left2('Chocolate'), 'ocolateCh')
        self.assertEqual(left2('bricks'), 'icksbr')

    def test_first_last6(self):
        self.assertEqual(first_last6([1, 2, 6]), True) 
        self.assertEqual(first_last6([6, 1, 2, 3]), True) 
        self.assertEqual(first_last6([13, 6, 1, 2, 3]), False)  
        self.assertEqual(first_last6([13, 6, 1, 2, 6]), True)
        self.assertEqual(first_last6([3, 2, 1]), False)
        self.assertEqual(first_last6([3, 6, 1]), False)
        self.assertEqual(first_last6([3, 6]), True)
        self.assertEqual(first_last6([6]), True)
        self.assertEqual(first_last6([3]), False) 
        self.assertEqual(first_last6([5, 6]), True)
        self.assertEqual(first_last6([5, 5]), False)
        self.assertEqual(first_last6([1, 2, 3, 4, 6]), True)
        self.assertEqual(first_last6([1, 2, 3, 4]), False)

    def test_same_first_last(self):
        self.assertEqual(same_first_last([1, 2, 3]), False)
        self.assertEqual(same_first_last([1, 2, 3, 1]), True)
        self.assertEqual(same_first_last([1, 2, 1]), True)
        self.assertEqual(same_first_last([7]), True)
        self.assertEqual(same_first_last([]), False)
        self.assertEqual(same_first_last([1, 2, 3, 4, 5, 1]), True)
        self.assertEqual(same_first_last([1, 2, 3, 4, 5, 13]), False)
        self.assertEqual(same_first_last([13, 2, 3, 4, 5, 13]), True)
        self.assertEqual(same_first_last([7, 7]), True)

    def test_make_pi(self):
        self.assertEqual(make_pi(), [3, 1, 4])

    def test_common_end(self):
        self.assertEqual(common_end([1, 2, 3], [7, 3]), True)
        self.assertEqual(common_end([1, 2, 3], [7, 3, 2]), False)
        self.assertEqual(common_end([1, 2, 3], [1, 3]), True)
        self.assertEqual(common_end([1, 2, 3], [1]), True)
        self.assertEqual(common_end([1, 2, 3], [2]), False)

    def test_sum3(self):
        self.assertEqual(sum3([1, 2, 3]), 6)
        self.assertEqual(sum3([5, 11, 2]), 18)
        self.assertEqual(sum3([7, 0, 0]), 7)
        self.assertEqual(sum3([1, 2, 1]), 4)
        self.assertEqual(sum3([1, 1, 1]), 3)
        self.assertEqual(sum3([2, 7, 2]), 11)

    def test_rotate_left3(self):
        self.assertEqual(rotate_left3([1, 2, 3]), [2, 3, 1])
        self.assertEqual(rotate_left3([5, 11, 9]), [11, 9, 5])
        self.assertEqual(rotate_left3([7, 0, 0]), [0, 0, 7])
        self.assertEqual(rotate_left3([1, 2, 1]), [2, 1, 1]) 
        self.assertEqual(rotate_left3([0, 0, 1]), [0, 1, 0])

    def test_reverse3(self):
        self.assertEqual(reverse3([1, 2, 3]), [3, 2, 1])
        self.assertEqual(reverse3([5, 11, 9]), [9, 11, 5])
        self.assertEqual(reverse3([7, 0, 0]), [0, 0, 7])
        self.assertEqual(reverse3([2, 1, 2]), [2, 1, 2])
        self.assertEqual(reverse3([1, 2, 1]), [1, 2, 1])
        self.assertEqual(reverse3([2, 11, 3]), [3, 11, 2])
        self.assertEqual(reverse3([0, 6, 5]), [5, 6, 0])
        self.assertEqual(reverse3([7, 2, 3]), [3, 2, 7])

    def test_max_end3(self):
        self.assertEqual(max_end3([1, 2, 3]), [3, 3, 3])
        self.assertEqual(max_end3([11, 5, 9]), [11, 11, 11]) 
        self.assertEqual(max_end3([2, 11, 3]), [3, 3, 3])
        self.assertEqual(max_end3([11, 3, 3]), [11, 11, 11])
        self.assertEqual(max_end3([3, 11, 11]), [11, 11, 11])
        self.assertEqual(max_end3([2, 2, 2]), [2, 2, 2])
        self.assertEqual(max_end3([2, 11, 2]), [2, 2, 2])  
        self.assertEqual(max_end3([0, 0, 1]), [1, 1, 1])

    def test_sum2(self):
        self.assertEqual(sum2([1, 2, 3]), 3)
        self.assertEqual(sum2([1, 1]), 2)
        self.assertEqual(sum2([1, 1, 1, 1]), 2) 
        self.assertEqual(sum2([1, 2]), 3)
        self.assertEqual(sum2([1]), 1)
        self.assertEqual(sum2([]), 0)
        self.assertEqual(sum2([4, 5, 6]), 9)
        self.assertEqual(sum2([4]), 4)


    def test_middle_way(self):
        self.assertEqual(middle_way([1, 2, 3], [4, 5, 6]), [2, 5])
        self.assertEqual(middle_way([7, 7, 7], [3, 8, 0]), [7, 8])
        self.assertEqual(middle_way([5, 2, 9], [1, 4, 5]), [2, 4])
        self.assertEqual(middle_way([1, 9, 7], [4, 8, 8]), [9, 8])
        self.assertEqual(middle_way([1, 2, 3], [3, 1, 4]), [2, 1])  
        self.assertEqual(middle_way([1, 2, 3], [4, 1, 1]), [2, 1])

    def test_make_ends(self):
        self.assertEqual(make_ends([1, 2, 3]), [1, 3])
        self.assertEqual(make_ends([1, 2, 3, 4]), [1, 4])
        self.assertEqual(make_ends([7, 4, 6, 2]), [7, 2])
        self.assertEqual(make_ends([1, 2, 2, 2, 2, 2, 2, 3]), [1, 3])
        self.assertEqual(make_ends([7, 4]), [7, 4])
        self.assertEqual(make_ends([7]), [7, 7])
        self.assertEqual(make_ends([5, 2, 9]), [5, 9])
        self.assertEqual(make_ends([2, 3, 4, 1]), [2, 1])

    def test_has23(self):
        self.assertEqual(has23([2, 5]), True)
        self.assertEqual(has23([4, 3]), True)
        self.assertEqual(has23([4, 5]), False)
        self.assertEqual(has23([2, 2]), True)
        self.assertEqual(has23([3, 2]), True)
        self.assertEqual(has23([3, 3]), True)
        self.assertEqual(has23([7, 7]), False)
        self.assertEqual(has23([3, 9]), True)
        self.assertEqual(has23([9, 5]), False)

    # Logic-1
    def test_cigar_party(self):
        self.assertEqual(cigar_party(30, False), False)
        self.assertEqual(cigar_party(50, False), True) 
        self.assertEqual(cigar_party(70, True), True)  
        self.assertEqual(cigar_party(30, True), False)
        self.assertEqual(cigar_party(50, True), True)
        self.assertEqual(cigar_party(60, False), True)
        self.assertEqual(cigar_party(61, False), False)
        self.assertEqual(cigar_party(40, False), True)
        self.assertEqual(cigar_party(39, False), False)
        self.assertEqual(cigar_party(40, True), True)
        self.assertEqual(cigar_party(39, True), False)

    def test_date_fashion(self):
        self.assertEqual(date_fashion(5, 10), 2)
        self.assertEqual(date_fashion(5, 2), 0)
        self.assertEqual(date_fashion(5, 5), 1)
        self.assertEqual(date_fashion(3, 3), 1)
        self.assertEqual(date_fashion(10, 2), 0)
        self.assertEqual(date_fashion(2, 9), 0)
        self.assertEqual(date_fashion(9, 9), 2)
        self.assertEqual(date_fashion(10, 5), 2)
        self.assertEqual(date_fashion(2, 2), 0)
        self.assertEqual(date_fashion(3, 7), 1)
        self.assertEqual(date_fashion(2, 7), 0)
        self.assertEqual(date_fashion(6, 2), 0)

    def test_squirrel_play(self):
        self.assertEqual(squirrel_play(70, False), True)
        self.assertEqual(squirrel_play(95, False), False)
        self.assertEqual(squirrel_play(95, True), True)
        self.assertEqual(squirrel_play(90, False), True)
        self.assertEqual(squirrel_play(90, True), True)
        self.assertEqual(squirrel_play(50, False), False)
        self.assertEqual(squirrel_play(50, True), False)
        self.assertEqual(squirrel_play(100, False), False)
        self.assertEqual(squirrel_play(100, True), True)
        self.assertEqual(squirrel_play(105, True), False)
        self.assertEqual(squirrel_play(59, False), False)
        self.assertEqual(squirrel_play(59, True), False)
        self.assertEqual(squirrel_play(60, False), True)

    def test_caught_speeding(self):    
        self.assertEqual(caught_speeding(60, False), 0)
        self.assertEqual(caught_speeding(65, False), 1)
        self.assertEqual(caught_speeding(65, True), 0)
        self.assertEqual(caught_speeding(80, False), 1)
        self.assertEqual(caught_speeding(85, False), 2)
        self.assertEqual(caught_speeding(85, True), 1)
        self.assertEqual(caught_speeding(70, False), 1)
        self.assertEqual(caught_speeding(75, False), 1)
        self.assertEqual(caught_speeding(75, True), 1)
        self.assertEqual(caught_speeding(40, False), 0)
        self.assertEqual(caught_speeding(40, True), 0)
        self.assertEqual(caught_speeding(90, False), 2)

    def test_sorta_sum(self):
        self.assertEqual(sorta_sum(3, 4), 7)
        self.assertEqual(sorta_sum(9, 4), 20)
        self.assertEqual(sorta_sum(10, 11), 21)
        self.assertEqual(sorta_sum(12, -3), 9)
        self.assertEqual(sorta_sum(-3, 12), 9)
        self.assertEqual(sorta_sum(4, 5), 9)
        self.assertEqual(sorta_sum(4, 6), 20)
        self.assertEqual(sorta_sum(14, 7), 21)
        self.assertEqual(sorta_sum(14, 6), 20)

    def test_alarm_clock(self):
        self.assertEqual(alarm_clock(1, False), '7:00')
        self.assertEqual(alarm_clock(5, False), '7:00')
        self.assertEqual(alarm_clock(0, False), '10:00')
        self.assertEqual(alarm_clock(6, False), '10:00')
        self.assertEqual(alarm_clock(0, True), 'off')
        self.assertEqual(alarm_clock(6, True), 'off')
        self.assertEqual(alarm_clock(1, True), '10:00')
        self.assertEqual(alarm_clock(3, True), '10:00')
        self.assertEqual(alarm_clock(5, True), '10:00')

    def test_love6(self):
        self.assertEqual(love6(6, 4), True)
        self.assertEqual(love6(4, 5), False)
        self.assertEqual(love6(1, 5), True)
        self.assertEqual(love6(1, 6), True)
        self.assertEqual(love6(1, 8), False)
        self.assertEqual(love6(1, 7), True)
        self.assertEqual(love6(7, 5), False)
        self.assertEqual(love6(8, 2), True)
        self.assertEqual(love6(6, 6), True)
        self.assertEqual(love6(-6, 2), False)
        self.assertEqual(love6(-4, -10), True)
        self.assertEqual(love6(-7, 1), False)
        self.assertEqual(love6(7, -1), True)
        self.assertEqual(love6(-6, 12), True)
        self.assertEqual(love6(-2, -4), False)
        self.assertEqual(love6(7, 1), True)
        self.assertEqual(love6(0, 9), False)
        self.assertEqual(love6(8, 3), False)
        self.assertEqual(love6(3, 3), True)
        self.assertEqual(love6(3, 4), False)

    def test_in1to10(self):
        self.assertEqual(in1to10(5, False), True)
        self.assertEqual(in1to10(11, False), False)
        self.assertEqual(in1to10(11, True), True)
        self.assertEqual(in1to10(10, False), True)
        self.assertEqual(in1to10(10, True), True)
        self.assertEqual(in1to10(9, False), True)
        self.assertEqual(in1to10(9, True), False)
        self.assertEqual(in1to10(1, False), True)
        self.assertEqual(in1to10(1, True), True)
        self.assertEqual(in1to10(0, False), False)
        self.assertEqual(in1to10(0, True), True)
        self.assertEqual(in1to10(-1, False), False)
        self.assertEqual(in1to10(-1, True), True)
        self.assertEqual(in1to10(99, False), False)
        self.assertEqual(in1to10(-99, True), True)

    def test_near_ten(self):
        self.assertEqual(near_ten(12), True)
        self.assertEqual(near_ten(17), False)
        self.assertEqual(near_ten(19), True)
        self.assertEqual(near_ten(31), True)
        self.assertEqual(near_ten(6), False)
        self.assertEqual(near_ten(10), True)
        self.assertEqual(near_ten(11), True)
        self.assertEqual(near_ten(21), True)
        self.assertEqual(near_ten(22), True)
        self.assertEqual(near_ten(23), False)
        self.assertEqual(near_ten(54), False)
        self.assertEqual(near_ten(155), False)
        self.assertEqual(near_ten(158), True)
        self.assertEqual(near_ten(3), False)
        self.assertEqual(near_ten(1), True)

    # From Logic-2
    def test_make_bricks(self):
        self.assertEqual(make_bricks(3, 1, 8), True)
        self.assertEqual(make_bricks(3, 1, 9), False)
        self.assertEqual(make_bricks(3, 2, 10), True)
        self.assertEqual(make_bricks(3, 2, 8), True)
        self.assertEqual(make_bricks(3, 2, 9), False)
        self.assertEqual(make_bricks(6, 1, 11), True)
        self.assertEqual(make_bricks(6, 0, 11), False)
        self.assertEqual(make_bricks(1, 4, 11), True)
        self.assertEqual(make_bricks(0, 3, 10), True)
        self.assertEqual(make_bricks(1, 4, 12), False)
        self.assertEqual(make_bricks(3, 1, 7), True)
        self.assertEqual(make_bricks(1, 1, 7), False)
        self.assertEqual(make_bricks(2, 1, 7), True)
        self.assertEqual(make_bricks(7, 1, 11), True)
        self.assertEqual(make_bricks(7, 1, 8), True)
        self.assertEqual(make_bricks(7, 1, 13), False)
        self.assertEqual(make_bricks(43, 1, 46), True)
        self.assertEqual(make_bricks(40, 1, 46), False)
        self.assertEqual(make_bricks(40, 2, 47), True)
        self.assertEqual(make_bricks(40, 2, 50), True)
        self.assertEqual(make_bricks(40, 2, 52), False)
        self.assertEqual(make_bricks(22, 2, 33), False)
        self.assertEqual(make_bricks(0, 2, 10), True)
        self.assertEqual(make_bricks(1000000, 1000, 1000100), True)
        self.assertEqual(make_bricks(2, 1000000, 100003), False)
        self.assertEqual(make_bricks(20, 0, 19), True)
        self.assertEqual(make_bricks(20, 0, 21), False)
        self.assertEqual(make_bricks(20, 4, 51), False)
        self.assertEqual(make_bricks(20, 4, 39), True)

    def test_lone_sum(self):
        self.assertEqual(lone_sum(1, 2, 3), 6)
        self.assertEqual(lone_sum(3, 2, 3), 2)
        self.assertEqual(lone_sum(3, 3, 3), 0)
        self.assertEqual(lone_sum(9, 2, 2), 9)
        self.assertEqual(lone_sum(2, 2, 9), 9)
        self.assertEqual(lone_sum(2, 9, 2), 9)
        self.assertEqual(lone_sum(2, 9, 3), 14)
        self.assertEqual(lone_sum(4, 2, 3), 9)
        self.assertEqual(lone_sum(1, 3, 1), 3)

    def test_lucky_sum(self):
        self.assertEqual(lucky_sum(1, 2, 3), 6)
        self.assertEqual(lucky_sum(1, 2, 13), 3)
        self.assertEqual(lucky_sum(1, 13, 3), 1)
        self.assertEqual(lucky_sum(1, 13, 13), 1)
        self.assertEqual(lucky_sum(6, 5, 2), 13)
        self.assertEqual(lucky_sum(13, 2, 3), 0)
        self.assertEqual(lucky_sum(13, 2, 13), 0)
        self.assertEqual(lucky_sum(13, 13, 2), 0)
        self.assertEqual(lucky_sum(9, 4, 13), 13)
        self.assertEqual(lucky_sum(8, 13, 2), 8)
        self.assertEqual(lucky_sum(7, 2, 1), 10)
        self.assertEqual(lucky_sum(3, 3, 13), 6)

    def test_no_teen_sum(self):
        self.assertEqual(no_teen_sum(1, 2, 3), 6)
        self.assertEqual(no_teen_sum(2, 13, 1), 3)
        self.assertEqual(no_teen_sum(2, 1, 14), 3)
        self.assertEqual(no_teen_sum(2, 1, 15), 18)
        self.assertEqual(no_teen_sum(2, 1, 16), 19)
        self.assertEqual(no_teen_sum(2, 1, 17), 3)
        self.assertEqual(no_teen_sum(17, 1, 2), 3)
        self.assertEqual(no_teen_sum(2, 15, 2), 19)
        self.assertEqual(no_teen_sum(16, 17, 18), 16)
        self.assertEqual(no_teen_sum(17, 18, 19), 0)
        self.assertEqual(no_teen_sum(15, 16, 1), 32)
        self.assertEqual(no_teen_sum(15, 15, 19), 30)
        self.assertEqual(no_teen_sum(15, 19, 16), 31)
        self.assertEqual(no_teen_sum(5, 17, 18), 5)
        self.assertEqual(no_teen_sum(17, 18, 16), 16)
        self.assertEqual(no_teen_sum(17, 19, 18), 0)

    def test_round_sum(self):
        self.assertEqual(round_sum(16, 17, 18), 60)
        self.assertEqual(round_sum(12, 13, 14), 30)
        self.assertEqual(round_sum(6, 4, 4), 10)
        self.assertEqual(round_sum(4, 6, 5), 20)
        self.assertEqual(round_sum(4, 4, 6), 10)
        self.assertEqual(round_sum(9, 4, 4), 10)
        self.assertEqual(round_sum(0, 0, 1), 0)
        self.assertEqual(round_sum(0, 9, 0), 10)
        self.assertEqual(round_sum(10, 10, 19), 40)
        self.assertEqual(round_sum(20, 30, 40), 90)
        self.assertEqual(round_sum(45, 21, 30), 100)
        self.assertEqual(round_sum(23, 11, 26), 60)
        self.assertEqual(round_sum(23, 24, 25), 70)
        self.assertEqual(round_sum(25, 24, 25), 80)
        self.assertEqual(round_sum(23, 24, 29), 70)
        self.assertEqual(round_sum(11, 24, 36), 70)
        self.assertEqual(round_sum(24, 36, 32), 90)
        self.assertEqual(round_sum(14, 12, 26), 50)
        self.assertEqual(round_sum(12, 10, 24), 40)

    def test_close_far(self):
        self.assertEqual(close_far(1, 2, 10), True)
        self.assertEqual(close_far(1, 2, 3), False)
        self.assertEqual(close_far(4, 1, 3), True)
        self.assertEqual(close_far(4, 5, 3), False)
        self.assertEqual(close_far(4, 3, 5), False)
        self.assertEqual(close_far(-1, 10, 0), True)
        self.assertEqual(close_far(0, -1, 10), True)
        self.assertEqual(close_far(10, 10, 8), True)
        self.assertEqual(close_far(10, 8, 9), False)
        self.assertEqual(close_far(8, 9, 10), False)
        self.assertEqual(close_far(8, 9, 7), False)
        self.assertEqual(close_far(8, 6, 9), True)

    def test_make_chocolate(self):
        self.assertEqual(make_chocolate(4, 1, 9), 4)
        self.assertEqual(make_chocolate(4, 1, 10), -1)
        self.assertEqual(make_chocolate(4, 1, 7), 2)
        self.assertEqual(make_chocolate(6, 2, 7), 2)
        self.assertEqual(make_chocolate(4, 1, 5), 0)
        self.assertEqual(make_chocolate(4, 1, 4), 4)
        self.assertEqual(make_chocolate(5, 4, 9), 4)
        self.assertEqual(make_chocolate(9, 3, 18), 3)
        self.assertEqual(make_chocolate(3, 1, 9), -1)
        self.assertEqual(make_chocolate(1, 2, 7), -1)
        self.assertEqual(make_chocolate(1, 2, 6), 1)
        self.assertEqual(make_chocolate(1, 2, 5), 0)
        self.assertEqual(make_chocolate(6, 1, 10), 5)
        self.assertEqual(make_chocolate(6, 1, 11), 6)
        self.assertEqual(make_chocolate(6, 1, 12), -1)
        self.assertEqual(make_chocolate(6, 1, 13), -1)
        self.assertEqual(make_chocolate(6, 2, 10), 0)
        self.assertEqual(make_chocolate(6, 2, 11), 1)
        self.assertEqual(make_chocolate(6, 2, 12), 2)
        self.assertEqual(make_chocolate(60, 100, 550), 50)
        self.assertEqual(make_chocolate(1000, 1000000, 5000006), 6)
        self.assertEqual(make_chocolate(7, 1, 12), 7)
        self.assertEqual(make_chocolate(7, 1, 13), -1)
        self.assertEqual(make_chocolate(7, 2, 13), 3)

    def test_double_char(self):
        self.assertEqual(double_char('The'), 'TThhee')
        self.assertEqual(double_char('AAbb'), 'AAAAbbbb')
        self.assertEqual(double_char('Hi-There'), 'HHii--TThheerree')
        self.assertEqual(double_char('Word!'), 'WWoorrdd!!')
        self.assertEqual(double_char('!!'), '!!!!')
        self.assertEqual(double_char(''), '')
        self.assertEqual(double_char('a'), 'aa')
        self.assertEqual(double_char('.'), '..')
        self.assertEqual(double_char('aa'), 'aaaa')

    def test_count_hi(self):
        self.assertEqual(count_hi('abc hi ho'), 1)
        self.assertEqual(count_hi('ABChi hi'), 2)
        self.assertEqual(count_hi('hihi'), 2)
        self.assertEqual(count_hi('hiHIhi'), 2)
        self.assertEqual(count_hi(''), 0)
        self.assertEqual(count_hi('h'), 0)
        self.assertEqual(count_hi('hi'), 1)
        self.assertEqual(count_hi('Hi is no HI on ahI'), 0)
        self.assertEqual(count_hi('hiho not HOHIhi'), 2)

    def test_cat_dog(self):
        self.assertEqual(cat_dog('catdog'), True)
        self.assertEqual(cat_dog('catcat'), False)
        self.assertEqual(cat_dog('1cat1cadodog'), True)
        self.assertEqual(cat_dog('catxxdogxxxdog'), False)
        self.assertEqual(cat_dog('catxdogxdogxcat'), True)
        self.assertEqual(cat_dog('catxdogxdogxca'), False)
        self.assertEqual(cat_dog('dogdogcat'), False)
        self.assertEqual(cat_dog('dogogcat'), True)
        self.assertEqual(cat_dog('dog'), False)
        self.assertEqual(cat_dog('cat'), False)
        self.assertEqual(cat_dog('ca'), True)
        self.assertEqual(cat_dog('c'), True)
        self.assertEqual(cat_dog(''), True)

    def test_count_code(self):
        self.assertEqual(count_code('aaacodebbb'), 1)
        self.assertEqual(count_code('codexxcode'), 2)
        self.assertEqual(count_code('cozexxcope'), 2)
        self.assertEqual(count_code('cozfxxcope'), 1)
        self.assertEqual(count_code('xxcozeyycop'), 1)
        self.assertEqual(count_code('cozcop'), 0)
        self.assertEqual(count_code('abcxyz'), 0)
        self.assertEqual(count_code('code'), 1)
        self.assertEqual(count_code('ode'), 0)
        self.assertEqual(count_code('c'), 0)
        self.assertEqual(count_code(''), 0)
        self.assertEqual(count_code('AAcodeBBcoleCCccoreDD'), 3)
        self.assertEqual(count_code('AAcodeBBcoleCCccorfDD'), 2)
        self.assertEqual(count_code('coAcodeBcoleccoreDD'), 3)

    def test_end_other(self):
        self.assertEqual(end_other('Hiabc', 'abc'), True)
        self.assertEqual(end_other('AbC', 'HiaBc'), True)
        self.assertEqual(end_other('abc', 'abXabc'), True)
        self.assertEqual(end_other('Hiabc', 'abcd'), False)
        self.assertEqual(end_other('Hiabc', 'bc'), True)
        self.assertEqual(end_other('Hiabcx', 'bc'), False)
        self.assertEqual(end_other('abc', 'abc'), True)
        self.assertEqual(end_other('xyz', '12xyz'), True)
        self.assertEqual(end_other('yz', '12xz'), False)
        self.assertEqual(end_other('Z', '12xz'), True)
        self.assertEqual(end_other('12', '12'), True)
        self.assertEqual(end_other('abcXYZ', 'abcDEF'), False)
        self.assertEqual(end_other('ab', 'ab12'), False)
        self.assertEqual(end_other('ab', '12ab'), True)

    def test_xyz_there(self):
        self.assertEqual(xyz_there('abcxyz'), True)
        self.assertEqual(xyz_there('abc.xyz'), False)
        self.assertEqual(xyz_there('xyz.abc'), True)
        self.assertEqual(xyz_there('abcxy'), False)
        self.assertEqual(xyz_there('xyz'), True)
        self.assertEqual(xyz_there('xy'), False)
        self.assertEqual(xyz_there('x'), False)
        self.assertEqual(xyz_there(''), False)
        self.assertEqual(xyz_there('abc.xyzxyz'), True)
        self.assertEqual(xyz_there('abc.xxyz'), True)
        self.assertEqual(xyz_there('.xyz'), False)
        self.assertEqual(xyz_there('12.xyz'), False)
        self.assertEqual(xyz_there('12xyz'), True)
        self.assertEqual(xyz_there('1.xyz.xyz2.xyz'), False)

    def test_count_evens(self):
        self.assertEqual(count_evens([2, 1, 2, 3, 4]), 3)
        self.assertEqual(count_evens([2, 2, 0]), 3)
        self.assertEqual(count_evens([1, 3, 5]), 0)
        self.assertEqual(count_evens([]), 0)
        self.assertEqual(count_evens([11, 9, 0, 1]), 1)
        self.assertEqual(count_evens([2, 11, 9, 0]), 2)
        self.assertEqual(count_evens([2]), 1)
        self.assertEqual(count_evens([2, 5, 12]), 2)

    def test_big_diff(self):
        self.assertEqual(big_diff([10, 3, 5, 6]), 7)
        self.assertEqual(big_diff([7, 2, 10, 9]), 8)
        self.assertEqual(big_diff([2, 10, 7, 2]), 8)
        self.assertEqual(big_diff([2, 10]), 8)
        self.assertEqual(big_diff([10, 2]), 8)
        self.assertEqual(big_diff([10, 0]), 10)
        self.assertEqual(big_diff([2, 3]), 1)
        self.assertEqual(big_diff([2, 2]), 0)
        self.assertEqual(big_diff([2]), 0)
        self.assertEqual(big_diff([5, 1, 6, 1, 9, 9]), 8)
        self.assertEqual(big_diff([7, 6, 8, 5]), 3)
        self.assertEqual(big_diff([7, 7, 6, 8, 5, 5, 6]), 3)

    def test_centered_average(self):
        self.assertEqual(centered_average([1, 2, 3, 4, 100]), 3)
        self.assertEqual(centered_average([1, 1, 5, 5, 10, 8, 7]), 5)
        self.assertEqual(centered_average([-10, -4, -2, -4, -2, 0]), -3)
        self.assertEqual(centered_average([5, 3, 4, 6, 2]), 4)
        self.assertEqual(centered_average([5, 3, 4, 0, 100]), 4)
        self.assertEqual(centered_average([100, 0, 5, 3, 4]), 4)
        self.assertEqual(centered_average([4, 0, 100]), 4)
        self.assertEqual(centered_average([0, 2, 3, 4, 100]), 3)
        self.assertEqual(centered_average([1, 1, 100]), 1)
        self.assertEqual(centered_average([7, 7, 7]), 7)
        self.assertEqual(centered_average([1, 7, 8]), 7)
        self.assertEqual(centered_average([1, 1, 99, 99]), 50)
        self.assertEqual(centered_average([1000, 0, 1, 99]), 50)
        self.assertEqual(centered_average([4, 4, 4, 4, 5]), 4)
        self.assertEqual(centered_average([4, 4, 4, 1, 5]), 4)
        self.assertEqual(centered_average([6, 4, 8, 12, 3]), 6)

    def test_sum13(self):
        self.assertEqual(sum13([1, 2, 2, 1]), 6)
        self.assertEqual(sum13([1, 1]), 2)
        self.assertEqual(sum13([1, 2, 2, 1, 13]), 6)
        self.assertEqual(sum13([1, 2, 13, 2, 1, 13]), 4)
        self.assertEqual(sum13([13, 1, 2, 13, 2, 1, 13]), 3)
        self.assertEqual(sum13([]), 0)
        self.assertEqual(sum13([13]), 0)
        self.assertEqual(sum13([13, 13]), 0)
        self.assertEqual(sum13([13, 0, 13]), 0)
        self.assertEqual(sum13([13, 1, 13]), 0)
        self.assertEqual(sum13([5, 7, 2]), 14)
        self.assertEqual(sum13([5, 13, 2]), 5)
        self.assertEqual(sum13([0]), 0)
        self.assertEqual(sum13([13, 0]), 0)

    def test_sum67(self):
        self.assertEqual(sum67([1, 2, 2]), 5)
        self.assertEqual(sum67([1, 2, 2, 6, 99, 99, 7]), 5)
        self.assertEqual(sum67([1, 1, 6, 7, 2]), 4)
        self.assertEqual(sum67([1, 6, 2, 2, 7, 1, 6, 99, 99, 7]), 2)
        self.assertEqual(sum67([1, 6, 2, 6, 2, 7, 1, 6, 99, 99, 7]), 2)
        self.assertEqual(sum67([2, 7, 6, 2, 6, 7, 2, 7]), 18)
        self.assertEqual(sum67([2, 7, 6, 2, 6, 2, 7]), 9)
        self.assertEqual(sum67([1, 6, 7, 7]), 8)
        self.assertEqual(sum67([6, 7, 1, 6, 7, 7]), 8)
        self.assertEqual(sum67([6, 8, 1, 6, 7]), 0)
        self.assertEqual(sum67([]), 0)
        self.assertEqual(sum67([6, 7, 11]), 11)
        self.assertEqual(sum67([11, 6, 7, 11]), 22)
        self.assertEqual(sum67([2, 2, 6, 7, 7]), 11)

    def test_has22(self):
        self.assertEqual(has22([1, 2, 2]), True)
        self.assertEqual(has22([1, 2, 1, 2]), False)
        self.assertEqual(has22([2, 1, 2]), False)
        self.assertEqual(has22([2, 2, 1, 2]), True)
        self.assertEqual(has22([1, 3, 2]), False)
        self.assertEqual(has22([1, 3, 2, 2]), True)
        self.assertEqual(has22([2, 3, 2, 2]), True)
        self.assertEqual(has22([4, 2, 4, 2, 2, 5]), True)
        self.assertEqual(has22([1, 2]), False)
        self.assertEqual(has22([2, 2]), True)
        self.assertEqual(has22([2]), False)
        self.assertEqual(has22([]), False)
        self.assertEqual(has22([3, 3, 2, 2]), True)
        self.assertEqual(has22([5, 2, 5, 2]), False)


if __name__ == '__main__':
    unittest.main()